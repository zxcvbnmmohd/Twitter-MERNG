import { useState } from "react";
import Router from "next/router";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useMutation } from "@apollo/react-hooks";
import Loader from "react-loader-spinner";
import { connect } from "react-redux"
import { LOGIN_USER } from "../apis";
import { setUser } from "../redux/actions/auth"

const Login = (props) => {
  const { setUser } = props

  const [values, setValues] = useState({
    username: "",
    password: "",
  });
  const [errors, setErrors] = useState({});
  const [login, { loading }] = useMutation(LOGIN_USER, {
    update(_, result) {
      setUser(result.data.login);
      Router.push("/home");
    },
    onError: ({ graphQLErrors, networkError, operation, forward }) => {
      if (graphQLErrors) {  
        setErrors(graphQLErrors[0].extensions.errors)
        for (let err of graphQLErrors) {
          switch (err.extensions.code) {
            case "UNAUTHENTICATED":
              const oldHeaders = operation.getContext().headers;
              operation.setContext({
                headers: {
                  ...oldHeaders,
                  authorization: getNewToken(),
                },
              });

              return forward(operation);
          }
        }
      }
      if (networkError) {
        console.log(`[Network error]: ${networkError}`);
      }
    },
    variables: values,
  });

  const onChange = (e) => {
    setValues({ ...values, [e.target.name]: e.target.value });
  };

  const onLogin = (e) => {
    e.preventDefault();
    login();
  };

  return (
    <div>
      <Head>
        <title>Twitter PERNG Clone | Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-row justify-center bg-twitter-blue text-twitter-text h-screen items-center">
        <div className="flex h-full w-full justify-center align-center">
          <Image
            src="/images/logo.png"
            width="250"
            height="250"
            objectFit="contain"
          />

        </div>

        <div className="flex h-full w-full justify-center bg-black">
          <div className="w-3/5 h-3/5 self-center bg-white text-black rounded-lg self-middle">
            <form
              className="flex flex-col justify-center items-center m-20"
              onSubmit={(e) => onLogin(e)}
            >
              <h1 className="text-2xl mb-5 text-center">Login!</h1>

              <input
                className={"w-4/5 h-[50px] mb-2 text-center rounded-full " + errors.username ?? " border-red-600 border-2"}
                placeholder="Username"
                name="username"
                type="text"
                value={values.username}
                onChange={(e) => onChange(e)}
              />
              <input
                className="w-4/5 h-[50px] mb-6 text-center rounded-full"
                placeholder="Password"
                name="password"
                type="password"
                value={values.password}
                onChange={(e) => onChange(e)}
              />

              <button
                className="flex w-4/5 h-[50px] mb-3 bg-twitter-blue rounded-full text-white justify-center items-center"
                type="submit"
              >
                {loading === true ? (
                  <Loader
                    type="Puff"
                    color="#FFFFFF"
                    height={40}
                    width={40}
                    timeout={5000}
                  />
                ) : (
                  <p>LOGIN</p>
                )}
              </button>

              <Link href="/register" className="cursor-pointer">
                <a>Or click here to Regiser</a>
              </Link>
            </form>
          </div>
        </div>
      </main>
    </div>
  );
}

const mapDispatchToProps = (dispatch) => {
  return {
    setUser: (user) => {
      dispatch(setUser(user))
    }
  }
}

export default connect(null, mapDispatchToProps)(Login)