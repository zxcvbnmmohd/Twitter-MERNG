import { useState } from "react";
import Head from "next/head";
import { connect } from "react-redux";
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
import { ChatItem, NavBar, PageTitle } from "../components/";
import { clearUser } from "../redux/actions/auth";
import { setChats, setActiveChat } from "../redux/actions/chats";

const emptyChatsComp = () => (
    <div className="flex flex-col justify-center px-[100px]">
        <div className="text-4xl font-bold mb-2">
            You donâ€™t have a message selected
        </div>
        <div className="text-l text-twitter-gray">
            Choose one from your existing messages, or start a new one.
        </div>
        <div className="inline-flex flex-col items-start justify-start py-4 cursor-pointer">
            <div className="inline-flex items-center justify-center px-10 py-4 bg-blue-500 hover:bg-blue-600 rounded-full">
                <p className="text-base font-bold leading-tight text-center text-white">
                    New message
                </p>
            </div>
        </div>
    </div>
);

const Messages = (props) => {
    const { user, chats, activeChat, clearUser, setChats, setActiveChat, } = props;
    const [searchedChats, setSearchChats] = useState("");

    return (
        <div>
            <Head>
                <title>Twitter PERNG Clone | Messages</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="flex justify-center flex-row bg-black text-twitter-text">
                <NavBar
                    logout={clearUser}
                    currentUser={user}
                    currentPage={"Messages"}
                />
                <div className="min-h-screen w-[400px] border-r-2 border-r-twitter-border">
                    <PageTitle
                        title={"Messages"}
                        image={"/images/icons/dark/Messages/Default.png"}
                        underTitle={
                            <form
                                className="flex flex-col justify-center items-center h-[50px] m-3"
                                onSubmit={(e) => onLogin(e)}
                            >
                                <input
                                    className="text-center rounded-full text-sm bg-transparent border border-twitter-gray px-4 py-3 w-full"
                                    placeholder="Search for people and groups"
                                    name="search"
                                    type="text"
                                    value={searchedChats}
                                    onChange={(e) => setSearchChats(e.target.value)}
                                />
                                <button className="hidden" type="submit" />
                            </form>
                        }
                    />
                    {chats.map((c) => (
                        <ChatItem key={c.id} chat={c} setChat={setActiveChat} />
                    ))}
                </div>
                <div
                    className={
                        "min-h-screen flex flex-col w-[600px] border-r-2 border-r-twitter-border " +
                        (activeChat === null ? " place-content-center" : "")
                    }
                >
                    {activeChat === null ? (
                        emptyChatsComp()
                    ) : (
                        <div className="flex flex-col">
                            <div className="h-[55px] px-4 py-2 sticky flex flex-row place-content-between items-center border-b border-b-twitter-gray">
                                <div className="flex flex-col">
                                    <p className="font-bold">{activeChat.name}</p>
                                    <p className="text-xs text-twitter-gray">@{activeChat.username}</p>
                                </div>
                                <InfoOutlinedIcon fontSize="25" />
                            </div>
                            <div className="">hi</div>
                            <div className=""></div>
                        </div>
                    )}
                </div>
            </main>
        </div>
    );
};

Messages.requireAuth = true

const mapStateToProps = (state) => {
    return {
        user: state.auth.user,
        chats: state.chats.chats,
        activeChat: state.chats.activeChat,
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        clearUser: () => {
            dispatch(clearUser());
        },
        setChats: (chats) => {
            dispatch(setChats(chats))
        },
        setActiveChat: (chat) => {
            dispatch(setActiveChat(chat));
        },
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(Messages);
